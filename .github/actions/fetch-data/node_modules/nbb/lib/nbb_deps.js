import { $APP, shadow$provide, $jscomp } from "./nbb_core.js";
const shadow_esm_import = function(x) { return import(x) };
import*as esm_import$node_crypto from"node:crypto";import*as esm_import$node_fs from"node:fs";import*as esm_import$node_path from"node:path";import*as esm_import$node_child_process from"node:child_process";var yAa=new $APP.F(null,"deps","deps",1883360319);var zAa=$APP.C.h($APP.q($APP.tV),$APP.vQ),AAa=esm_import$node_path.resolve(zAa,".nbb",".cache"),oX=$APP.zs.h($APP.q($APP.tV),new $APP.G(null,2,5,$APP.I,[$APP.vE,yAa],null));
if($APP.l(oX)){var BAa;BAa=esm_import$node_crypto.createHash("sha1").update($APP.m.g(oX),"binary").digest("hex");var pX=esm_import$node_path.resolve(AAa,BAa),CAa=esm_import$node_path.resolve(pX,"deps.edn"),DAa=esm_import$node_path.resolve(pX,"nbb-deps.jar"),qX=esm_import$node_path.resolve(pX,"nbb-deps");if(!$APP.l(esm_import$node_fs.existsSync(qX))){var EAa=($APP.x.h("win32",process.platform),"bb"),rX=esm_import$node_path.resolve(AAa,"extract.bb");esm_import$node_fs.mkdirSync(pX,{recursive:!0});esm_import$node_fs.writeFileSync(CAa,
$APP.m.g(new $APP.h(null,1,[yAa,oX],null)));$APP.Hb.call(null,"Downloading dependencies...");esm_import$node_child_process.execSync([EAa," --config ",$APP.m.g(CAa)," --deps-root ",$APP.m.g(zAa)," uberjar ",$APP.m.g(DAa)].join(""));$APP.Hb.call(null,"Extracting dependencies...");esm_import$node_fs.writeFileSync(rX,["(fs/unzip ",$APP.ul.l($APP.B([DAa]))," ",$APP.ul.l($APP.B([qX])),")"].join(""));esm_import$node_child_process.execSync(["bb ",$APP.m.g(rX)].join(""));esm_import$node_fs.unlinkSync(rX);
$APP.Hb.call(null,"Done.")}$APP.Is(qX)};